'use strict';

const request = require('request');
const crypto = require('crypto');

class Deezer {
  constructor() {
    this.apiUrl = 'http://www.deezer.com/ajax/gw-light.php';
    this.apiQueries = {
      api_version: '1.0',
      api_token: null,
      input: '3',
    };
    this.httpHeaders = {
      'User-Agent': 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36',
      'Content-Language': 'en-US',
      'Cache-Control': 'max-age=0',
      'Accept': '*/*',
      'Accept-Charset': 'utf-8,ISO-8859-1;q=0.7,*;q=0.3',
      'Accept-Language': 'de-DE,de;q=0.8,en-US;q=0.6,en;q=0.4',
    };
    this.albumPicturesHost = "http://e-cdn-images.deezer.com/images/cover/"
    this.albumPictures = {
      big: "/800x800.jpg"
    }
    this.reqStream = null;
    return new Promise((resolve, reject) => {
      if (this.apiQueries.api_token) {
        resolve(this);
      } else {
        request.get({
          url: 'https://www.deezer.com/ajax/gw-light.php?api_version=1.0&api_token=&input=3&method=deezer.ping',
          headers: this.httpHeaders,
          jar: true,
        }, (err, res, body) => {
          if (!err && res.statusCode === 200) {
            this.apiQueries.api_token = JSON.parse(body).results.CHECKFORM;
            resolve(this);
          } else {
            reject('Unable to load deezer.com');
          }
        });
      }
    });
  }

  getPlaylist(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/playlist/${id}`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(`Wrong playlist id: ${id}`);
          }
          resolve(json);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getPlaylistSize(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/playlist/${id}/tracks?limit=1`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error || !json.total) {
            reject(`Wrong playlist id: ${id}`);
            return;
          }
          resolve(json.total);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getPlaylistTracks(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/playlist/${id}/tracks?limit=-1`,
        headers: this.httpHeaders,
        jar: true
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(`Wrong playlist id: ${id}`);
          }
          resolve(json);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getAlbum(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/album/${id}`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(`Wrong album id: ${id}`);
          }
          resolve(json);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getAlbumSize(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/album/${id}/tracks?limit=1`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error || !json.total) {
            reject(`Wrong album id: ${id}`);
          }
          resolve(json.total);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getAlbumTracks(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/album/${id}/tracks?limit=-1`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(`Wrong album id: ${id}`);
          }
          resolve(json);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getArtist(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/artist/${id}`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(`Wrong artist id: ${id}`);
          }
          resolve(json);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getArtistAlbums(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/artist/${id}'/albums?limit=-1`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(`Wrong artist id: ${id}`);
          }
          if (!json.data) {
            json.data = [];
          }
          resolve(json);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getChartsTopCountry() {
    return new Promise((resolve, reject) => {
      request.get({
        url: 'http://api.deezer.com/user/637006841/playlists?limit=-1',
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(json.error);
          }
          if (!json.data) {
            json.data = [];
          } else {
            json.data.shift();
          }
          resolve(json);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getTrack(id) {
    return new Promise((resolve, reject) => {
      const query = [{
        method: 'song.getListData',
        params: {
          'sng_ids': [id],
        },
      }];
      request.post({
        url: this.apiUrl,
        headers: this.httpHeaders,
        qs: this.apiQueries,
        body: JSON.stringify(query),
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body)[0].results.data[0];
          if (json.TOKEN) {
            reject('Uploaded Files are currently not supported');
          }
          const sngId = json.SNG_ID;
          const md5Origin = json.MD5_ORIGIN;
          let format = 3;
          if (json.FILESIZE_MP3_320 <= 0) {
            if (json.FILESIZE_MP3_256 > 0) {
              format = 5;
            } else {
              format = 1;
            }
          }
          const mediaVersion = parseInt(json.MEDIA_VERSION);
          json.downloadUrl = this.getDownloadUrl(md5Origin, sngId, format, mediaVersion);
          resolve(json);
        } else {
          reject(`Unable to get Track ${id}`);
        }
      });
    });
  }

  search(text, type) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `http://api.deezer.com/search/${type || ''}?q=${text}`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(`Wrong search type/text: ${text}/${type}`);
            return;
          }
          resolve(json);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  hasTrackAlternative(id) {
    return new Promise((resolve, reject) => {
      request.get({
        url: `'http://api.deezer.com/track/${id}`,
        headers: this.httpHeaders,
        jar: true,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          const json = JSON.parse(body);
          if (json.error) {
            reject(`Wrong track id: ${id}`);
          }
          if (!json.alternative) {
            resolve(false);
          }
          resolve(json.alternative);
        } else {
          reject('Unable to reach Deezer API');
        }
      });
    });
  }

  getDownloadUrl(md5Origin, id, format, mediaVersion) {
    let urlPart = `${md5Origin}¤${format}¤${id}¤${mediaVersion}`;
    const md5sum = crypto.createHash('md5').update(new Buffer(urlPart, 'binary')).digest('hex');
    urlPart = `${md5sum}¤${urlPart}¤`;
    const cipher = crypto.createCipheriv('aes-128-ecb', new Buffer('jo6aey6haid2Teih'), new Buffer(''));
    const buffer = Buffer.concat([cipher.update(urlPart, 'binary'), cipher.final()]);
    return `http://e-cdn-proxy-${md5Origin.substring(0, 1)}.deezer.com/mobile/1/${buffer.toString('hex').toLowerCase()}`;
  }

  decryptTrack(track) {
    return new Promise((resolve, reject) => {
      request.get({
        url: track.downloadUrl,
        headers: this.httpHeaders,
        jar: true,
        encoding: null,
      }, (err, res, body) => {
        if (!err && res.statusCode === 200) {
          decryptDownload(new Buffer(body, 'binary'), track.SNG_ID).then(buffer => resolve(buffer));
        } else {
          reject(err);
        }
      });
    });
  }
}

function decryptDownload(source, id) {
  const intervalChunk = 3;
  const chunkSize = 2048;
  const blowFishKey = getBlowFishKey(id);
  let readTotal = 0;
  let i = 0;
  let position = 0;
  let first = true;

  const destBuffer = new Buffer(source.length + (chunkSize - (source.length - (parseInt(source.length / chunkSize) * chunkSize))));
  destBuffer.fill(0);

  return new Promise((resolve, reject) => {
    try {
      while (position <= source.length) {
        let chunk = new Buffer(chunkSize);
        chunk.fill(0);
        source.copy(chunk, 0, position, position + chunkSize);
        if (i % intervalChunk === 0) {
          const cipher = crypto.createDecipheriv('bf-cbc', blowFishKey, new Buffer([0, 1, 2, 3, 4, 5, 6, 7]));
          cipher.setAutoPadding(false);
          chunk = cipher.update(chunk, 'binary', 'binary') + cipher.final();
        }
        if (first) {
          first = false;
        }
        destBuffer.write(chunk.toString('binary'), position, 'binary');
        position += chunkSize;
        i++;
        readTotal += position;
      }
      resolve(destBuffer);
    } catch (err) {
      reject(err);
    }
  });
}

function xorHex(parts) {
  let data = '';
  for (let i = 0; i < 16; i++) {
    let character = parts[0].charCodeAt(i);
    for (let j = 1; j < parts.length; j++) {
      character ^= parts[j].charCodeAt(i);
    }
    data += String.fromCharCode(character);
  }
  return data;
}

function getBlowFishKey(encryptionKey) {
  if (encryptionKey < 1) {
    encryptionKey *= -1;
  }
  const hashcode = crypto.createHash('md5').update(encryptionKey.toString()).digest('hex');
  const hPart = hashcode.substring(0, 16);
  const lPart = hashcode.substring(16, 32);
  const parts = ['g4el58wc0zvf9na1', hPart, lPart];
  return new Buffer(xorHex(parts));
}

module.exports = new Deezer();
